--- D:\Emerald\original\EmeraldMovement.cs	Sat Jul 20 00:28:29 2024
+++ EmeraldMovement.cs	Sat Nov 16 10:23:55 2024
@@ -4,6 +4,10 @@
 using UnityEngine.AI;
 using EmeraldAI.Utility;
 
+#if ASTAR
+using Pathfinding; // DKE: Referencing the AStarPathfinding code. If necessary also update your code assemblies.
+#endif
+
 namespace EmeraldAI
 {
     [HelpURL("https://black-horizon-studios.gitbook.io/emerald-ai-wiki/emerald-components-required/movement-component")]
@@ -93,8 +97,15 @@
         #region Private Variables
         EmeraldSystem EmeraldComponent;
         EmeraldAnimation AnimationComponent;
+        
+#if ASTAR        
+        NavMeshAgentImposter m_NavMeshAgent; // DKE: This block changes the core properties to be AStarPathfinding Compatible
+        ABPath m_AIPath;                    
+#else        
         NavMeshAgent m_NavMeshAgent;
-        NavMeshPath AIPath;
+        NavMeshPath m_AIPath;               // DKE: Refactored from AIPath to m_AIPath
+#endif        
+       
         Animator AIAnimator;
         float DirectionDampTime = 0.25f;
         float RayCastUpdateTimer;
@@ -135,7 +146,16 @@
         /// </summary>
         public void InitializeMovement ()
         {
-            AIPath = new NavMeshPath();
+#if ASTAR
+            // DKE: do not use constructor for ABPath, see: https://arongranberg.com/astar/docs/abpath.html#ABPath 
+            if(AstarPath.active.data.graphs.Length<1)
+                Debug.LogError("EmeraldMovement.InitializeMovement(): no AStar graph active.");
+
+            // DKE: Align AI with ground causes strange (flying) behaviour so set it to no by default. 
+            AlignAIWithGround = YesOrNo.No;
+#else
+            m_AIPath = new NavMeshPath();
+#endif
             AIAnimator = GetComponent<Animator>();
             EmeraldComponent = GetComponent<EmeraldSystem>();
             AnimationComponent = GetComponent<EmeraldAnimation>();
@@ -176,7 +196,18 @@
         /// </summary>
         public void SetupNavMeshAgent()
         {   
+#if ASTAR
+            // DKE: Get the AStarPathfinding agent.
+            m_NavMeshAgent = GetComponent<NavMeshAgentImposter>();
+            
+            // DKE: Disable the Unity NavMeshAgent
+            NavMeshAgent tempNavMeshAgent = GetComponent<NavMeshAgent>();
+            if (tempNavMeshAgent)
+                tempNavMeshAgent.enabled = false;
+            
+#else
             m_NavMeshAgent = GetComponent<NavMeshAgent>();          
+#endif        
 
             if (GetComponent<Rigidbody>())
             {
@@ -187,18 +218,43 @@
 
             if (m_NavMeshAgent == null)
             {
+#if ASTAR
+                Debug.LogWarning($"EmeraldMovement.SetupNavMeshAgent(): No AIPath(derived) component found on this GameObject {this.name}");
+               
+                // DKE: Add the NavMeshAgentImposter if it's not on this gameObject already.
+                // Note: in EmeraldSystem.Awake() we have a similar check so it's likely to be here.
+                m_NavMeshAgent = gameObject.AddComponent<NavMeshAgentImposter>();
+                m_NavMeshAgent.Initialize();
+#else                
                 gameObject.AddComponent<NavMeshAgent>();
                 m_NavMeshAgent = GetComponent<NavMeshAgent>();
+#endif
             }
 
-            AIPath = new NavMeshPath();
-            m_NavMeshAgent.CalculatePath(transform.position, AIPath);
+#if ASTAR
+            // DKE: Initialize the navMeshAgentImposter
+            m_NavMeshAgent.SetDebugLevel(1);
+            m_NavMeshAgent.SetGraphMode(true);
+
+            // DKE: do not use constructor for ABPath, see: https://arongranberg.com/astar/docs/abpath.html#ABPath
+            m_AIPath = ABPath.Construct(transform.position, transform.position);
+            m_NavMeshAgent.SetPath(m_AIPath);
+            m_NavMeshAgent.endReachedDistance = StoppingDistance;
+            m_NavMeshAgent.whenCloseToDestination = CloseToDestinationMode.Stop;
+            m_NavMeshAgent.maxSpeed = 0;            
+            m_NavMeshAgent.updateRotation = false;            
+            if (MovementType == MovementTypes.NavMeshDriven) m_NavMeshAgent.maxAcceleration = 75;
+            
+#else            
+            
+            m_AIPath = new NavMeshPath();
+            m_NavMeshAgent.CalculatePath(transform.position, m_AIPath);
             m_NavMeshAgent.stoppingDistance = StoppingDistance;
             m_NavMeshAgent.updateRotation = false;
             m_NavMeshAgent.updateUpAxis = false;
             m_NavMeshAgent.speed = 0;
             if (MovementType == MovementTypes.NavMeshDriven) m_NavMeshAgent.acceleration = 75;
-
+#endif
             if (m_NavMeshAgent.enabled)
             {
                 if (WanderType == WanderTypes.Destination)
@@ -216,6 +272,7 @@
                         {
                             m_NavMeshAgent.stoppingDistance = 0.1f;
                             m_NavMeshAgent.autoBraking = false;
+                            Debug.LogWarning("Set Autobraking to false");
                             StartCoroutine(SetDelayedDestination(WaypointsList[WaypointIndex]));
                         }
                     }
@@ -248,18 +305,92 @@
 
         IEnumerator SetDelayedDestination(Vector3 Destination)
         {
+#if ASTAR            
+            m_NavMeshAgent.canSearch = true;            //DKE: added this one, may not be needed
+
+            // DKE: For some reason the destination we set must be slightly different from the exact waypoint position
+            
+            Vector3 _destination = new Vector3(Destination.x, Destination.y+0.1f, Destination.z);
+            m_NavMeshAgent.SetDestination(_destination);
+            
+#else            
             m_NavMeshAgent.destination = Destination;
+#endif
             yield return new WaitForSeconds(1);
             LockTurning = false;
             AIAnimator.SetBool("Idle Active", false);
             MovementInitialized = true;
         }
 
+        #if ASTAR
+        /// <summary>
+        /// Added DKE: This is the callback for CheckPath's ABPath construct since AStarPathfinding calculates paths asynchronously.
+        /// </summary>
+        /// 
+        public void OnPathComplete_CheckPath(Path p)
+        {
+            Debug.Log($"EmeraldMovement.OnPathComplete_CheckPath(): callback called.");
+
+            if (p.CompleteState == PathCompleteState.Complete)
+            {
+                // Path is valid, do nothing
+                Debug.Log($"EmeraldMovement.OnPathComplete_CheckPath(): path is valid.");
+            }
+            else if (p.CompleteState == PathCompleteState.Partial)
+            {
+                if (WanderType == WanderTypes.Destination)
+                {
+                    Debug.LogError("The AI ''" + gameObject.name + "'s'' Destination is not reachable. " +
+                                   "The AI's Wander Type has been set to Stationary. Please check the Destination and make sure it is on the NavMesh and is reachable.");
+                    m_NavMeshAgent.endReachedDistance = StoppingDistance;
+                    StartingDestination = transform.position + (transform.forward * StoppingDistance);
+                    WanderType = WanderTypes.Stationary;
+                }
+                else if (WanderType == WanderTypes.Waypoints)
+                {
+                    Debug.LogError("The AI ''" + gameObject.name + "'s'' Waypoint #" + (WaypointIndex + 1) + " is not reachable. " +
+                                   "The AI's Wander Type has been set to Stationary. Please check the Waypoint #" + (WaypointIndex + 1) + " and make sure it is on the NavMesh and is reachable.");
+                    m_NavMeshAgent.endReachedDistance = StoppingDistance;
+                    StartingDestination = transform.position + (transform.forward * StoppingDistance);
+                    WanderType = WanderTypes.Stationary;
+                }
+                
+            }
+            else if (p.CompleteState == PathCompleteState.Error)
+            {
+                if (WanderType == WanderTypes.Destination)
+                {
+                    Debug.LogError("The AI ''" + gameObject.name + "'s'' Destination is not reachable. " +
+                                   "The AI's Wander Type has been set to Stationary. Please check the Destination and make sure it is on the NavMesh.");
+                    m_NavMeshAgent.endReachedDistance = StoppingDistance;
+                    StartingDestination = transform.position + (transform.forward * StoppingDistance);
+                    WanderType = WanderTypes.Stationary;
+                }
+                else if (WanderType == WanderTypes.Waypoints)
+                {
+                    Debug.LogError("The AI ''" + gameObject.name + "'s'' Waypoint #" + (WaypointIndex + 1) + " is not reachable. " +
+                                   "The AI's Wander Type has been set to Stationary. Please check the Waypoint #" + (WaypointIndex + 1) + " and make sure it is on the NavMesh and is reachable.");
+                    m_NavMeshAgent.endReachedDistance = StoppingDistance;
+                    StartingDestination = transform.position + (transform.forward * StoppingDistance);
+                    WanderType = WanderTypes.Stationary;
+                }
+            }
+        }
+#endif
+        
         /// <summary>
         /// Check our AI's path to ensure if it is reachable. If it isn't, regenerate, depending on the Wander Type.
         /// </summary>
         void CheckPath(Vector3 Destination)
         {
+#if ASTAR
+            // DKE: this code needed to be ajusted since CalculatePath is synchronous and AStarPathfinding creates paths asynchronously.
+            //      the part of the method which is below the #else statement is dealt with in the OnPathComplete_CheckPath callback above.
+            
+            Debug.Log("CheckPath called for "+Destination);
+            m_AIPath = ABPath.Construct(transform.position, Destination, OnPathComplete_CheckPath);
+            m_NavMeshAgent.SetPath(m_AIPath);
+#else            
             NavMeshPath path = new NavMeshPath();
             m_NavMeshAgent.CalculatePath(Destination, path);
             if (path.status == NavMeshPathStatus.PathComplete)
@@ -308,6 +439,7 @@
             {
                 Debug.Log("Path Invalid");
             }
+#endif
         }
 
         /// <summary>
@@ -372,6 +504,14 @@
 
                 if (m_NavMeshAgent.isStopped || RotateTowardsTarget || AIAnimator.GetBool("Hit") || DestinationAdjustedAngle > MovingTurnLimit || m_NavMeshAgent.remainingDistance + 0.2f <= m_NavMeshAgent.stoppingDistance || CanIdle())
                 {
+                    // DKE: DEBUG
+                    //Debug.LogWarning($"Distance={m_NavMeshAgent.remainingDistance + 0.2f <= m_NavMeshAgent.stoppingDistance}");
+                    //Debug.LogWarning($"Autobraking={m_NavMeshAgent.autoBraking}");
+                    
+                    //Debug.LogWarning($"AIAnimator.GetBool(\"Hit\")={AIAnimator.GetBool("Hit")}");
+                    // --> Debug.LogWarning($"DestinationAdjustedAngle={DestinationAdjustedAngle> MovingTurnLimit}");
+                    //Debug.LogWarning($"CanIdle={CanIdle()}");
+                    
                     AIAnimator.SetFloat("Speed", 0, DecelerationDampTime, Time.deltaTime);
                     m_NavMeshAgent.speed = 0;
                 }
@@ -622,6 +762,8 @@
                 {
                     WaypointIndex++;
 
+                    Debug.Log($"<color=red>Next waypoint {WaypointIndex}</color>");
+                    
                     if (WaypointIndex == WaypointsList.Count)
                     {
                         WaypointIndex = 0;
@@ -629,7 +771,16 @@
 
                         if (WaypointType == WaypointTypes.Reverse)
                         {
+#if ASTAR
+                            Debug.Log($"<color=blue>Reversing waypoint</color>");
+                            
+                            //Vector3 _destination = new Vector3(WaypointsList[WaypointsList.Count - 1].x, WaypointsList[WaypointsList.Count - 1].y+0.1f, WaypointsList[WaypointsList.Count - 1].z);
+                            //m_NavMeshAgent.destination = _destination;
+
+                            m_NavMeshAgent.SetDestinationWithWaypoint(WaypointsList[WaypointsList.Count - 1]);
+#else
                             m_NavMeshAgent.destination = WaypointsList[WaypointsList.Count - 1];
+#endif
                             WaypointsList.Reverse();
                             m_NavMeshAgent.stoppingDistance = 10;
                             WaypointReverseActive = true;
@@ -640,7 +791,14 @@
 
                     if (m_NavMeshAgent.enabled && !WaypointReverseActive)
                     {
+#if ASTAR
+                        Debug.Log($"<color=red>Next waypoint coords={WaypointsList[WaypointIndex]}</color>");
+                        // DKE: For some reason the destination we set must be slightly different from the exact waypoint position
+                        Vector3 _destination = new Vector3(WaypointsList[WaypointIndex].x, WaypointsList[WaypointIndex].y+0.1f, WaypointsList[WaypointIndex].z);
+                        m_NavMeshAgent.destination = _destination;
+#else
                         m_NavMeshAgent.destination = WaypointsList[WaypointIndex];
+#endif
                     }
                 }
             }
@@ -655,10 +813,16 @@
 
                 if (m_NavMeshAgent.enabled)
                 {
+#if ASTAR
+                    m_NavMeshAgent.SetDestinationWithWaypoint(WaypointsList[WaypointIndex]);
+#else
                     m_NavMeshAgent.destination = WaypointsList[WaypointIndex];
+#endif
                 }
             }
 
+            Debug.Log($"<color=green>Now call CheckPath()</color>");
+            
             //Check that our AI's path is valid.
             CheckPath(m_NavMeshAgent.destination);
             OnGeneratedWaypoint?.Invoke();
@@ -799,12 +963,26 @@
                         GeneratedDestination = new Vector3(GeneratedDestination.x, HitDown.point.y, GeneratedDestination.z);
                         NavMeshHit DestinationHit;
 
+                        // DKE: NavMesh.SamplePosition should be replaced with AStar's NavGraph.GetNearest
+                        //
+                        // https://arongranberg.com/astar/docs/navgraph/getnearest.html#GetNearest2
+                        //
+                        // Start using: https://arongranberg.com/astar/docs/astarpath/getnearest.html
+#if ASTAR
+                        // Note: this finds the closest node without taking a maximum distance into account
+                        NNInfo nodeQuery = AstarPath.active.GetNearest(GeneratedDestination, NNConstraint.Walkable);
+                        AIAnimator.SetBool("Idle Active", false);
+                        //m_NavMeshAgent.destination = nodeQuery.position;
+                        m_NavMeshAgent.SetDestination(nodeQuery.position);
+                        OnGeneratedWaypoint?.Invoke();
+#else
                         if (NavMesh.SamplePosition(GeneratedDestination, out DestinationHit, 4, m_NavMeshAgent.areaMask))
                         {
                             AIAnimator.SetBool("Idle Active", false);
                             m_NavMeshAgent.SetDestination(DestinationHit.position);
                             OnGeneratedWaypoint?.Invoke();
                         }
+#endif
                     }
                 }
             }
@@ -1115,6 +1293,8 @@
         /// </summary>
         void ReturnToStartingDestination ()
         {
+            Debug.Log("<color=yellow>ReturnToStartingDestination() called</color>");
+
             if (EmeraldComponent.TargetToFollow) return; //Don't set the AI's wandering position if it has a follow target
 
             if (WanderType == WanderTypes.Dynamic)
@@ -1129,10 +1309,17 @@
             else if (WanderType == WanderTypes.Waypoints && EmeraldComponent.m_NavMeshAgent.enabled)
             {
                 EmeraldComponent.m_NavMeshAgent.ResetPath();
+#if ASTAR
+                if (WaypointType != WaypointTypes.Random)
+                    EmeraldComponent.m_NavMeshAgent.SetDestinationWithWaypoint(WaypointsList[WaypointIndex]);
+                else
+                    WaypointTimer = 1;
+#else
                 if (WaypointType != WaypointTypes.Random)
                     EmeraldComponent.m_NavMeshAgent.destination = WaypointsList[WaypointIndex];
                 else
                     WaypointTimer = 1;
+#endif
             }
             else if (WanderType == WanderTypes.Destination && EmeraldComponent.m_NavMeshAgent.enabled)
             {
@@ -1153,11 +1340,25 @@
 
             if (CalculatePathTimer >= 0.5f)
             {
-                m_NavMeshAgent.CalculatePath(EmeraldComponent.CombatTarget.position, AIPath);
+#if ASTAR
+                List<Vector3> buffer = new List<Vector3>();
+                m_NavMeshAgent.GetRemainingPath(buffer, out bool stale);
                 CalculatePathTimer = 0;
+                Debug.Log($"CanReachTargetInternal(): result = {!stale}");
+                return !stale;
+#else
+                m_NavMeshAgent.CalculatePath(EmeraldComponent.CombatTarget.position, m_AIPath);
+                CalculatePathTimer = 0;
+#endif
             }
-
-            return AIPath.status == NavMeshPathStatus.PathComplete;
+            
+#if ASTAR
+            // While AStar is calculating the path the CompleteState will simply return false, so using ConstructPath is useless here
+            // So, we'll assume a path has been calculated and share its completion state
+            return m_AIPath.CompleteState == PathCompleteState.Complete;
+#else
+            return m_AIPath.status == NavMeshPathStatus.PathComplete;
+#endif
         }
 
         public void EnableReturnToStart()
